// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"
	rents "rentRoom/businesses/rents"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Fetch provides a mock function with given fields: ctx, page, perpage
func (_m *Repository) Fetch(ctx context.Context, page int, perpage int) ([]rents.Domain, int, error) {
	ret := _m.Called(ctx, page, perpage)

	var r0 []rents.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []rents.Domain); ok {
		r0 = rf(ctx, page, perpage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]rents.Domain)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, int, int) int); ok {
		r1 = rf(ctx, page, perpage)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, int, int) error); ok {
		r2 = rf(ctx, page, perpage)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Find provides a mock function with given fields: ctx, rentStatus
func (_m *Repository) Find(ctx context.Context, rentStatus string) ([]rents.Domain, error) {
	ret := _m.Called(ctx, rentStatus)

	var r0 []rents.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string) []rents.Domain); ok {
		r0 = rf(ctx, rentStatus)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]rents.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, rentStatus)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: ctx, usersId
func (_m *Repository) GetById(ctx context.Context, usersId int) (rents.Domain, error) {
	ret := _m.Called(ctx, usersId)

	var r0 rents.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int) rents.Domain); ok {
		r0 = rf(ctx, usersId)
	} else {
		r0 = ret.Get(0).(rents.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, usersId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByRentId provides a mock function with given fields: ctx, rentsId
func (_m *Repository) GetByRentId(ctx context.Context, rentsId int) (rents.Domain, error) {
	ret := _m.Called(ctx, rentsId)

	var r0 rents.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int) rents.Domain); ok {
		r0 = rf(ctx, rentsId)
	} else {
		r0 = ret.Get(0).(rents.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, rentsId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRoomById provides a mock function with given fields: ctx, roomId
func (_m *Repository) GetRoomById(ctx context.Context, roomId int) (rents.Domain, error) {
	ret := _m.Called(ctx, roomId)

	var r0 rents.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int) rents.Domain); ok {
		r0 = rf(ctx, roomId)
	} else {
		r0 = ret.Get(0).(rents.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, roomId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, rentsDomain
func (_m *Repository) Store(ctx context.Context, rentsDomain *rents.Domain) (rents.Domain, error) {
	ret := _m.Called(ctx, rentsDomain)

	var r0 rents.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *rents.Domain) rents.Domain); ok {
		r0 = rf(ctx, rentsDomain)
	} else {
		r0 = ret.Get(0).(rents.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *rents.Domain) error); ok {
		r1 = rf(ctx, rentsDomain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, rentsDomain
func (_m *Repository) Update(ctx context.Context, rentsDomain *rents.Domain) (rents.Domain, error) {
	ret := _m.Called(ctx, rentsDomain)

	var r0 rents.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *rents.Domain) rents.Domain); ok {
		r0 = rf(ctx, rentsDomain)
	} else {
		r0 = ret.Get(0).(rents.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *rents.Domain) error); ok {
		r1 = rf(ctx, rentsDomain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
