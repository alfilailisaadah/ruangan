// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"
	buildings "rentRoom/businesses/buildings"

	mock "github.com/stretchr/testify/mock"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// Fetch provides a mock function with given fields: ctx, page, perpage
func (_m *Usecase) Fetch(ctx context.Context, page int, perpage int) ([]buildings.Domain, int, error) {
	ret := _m.Called(ctx, page, perpage)

	var r0 []buildings.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []buildings.Domain); ok {
		r0 = rf(ctx, page, perpage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]buildings.Domain)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, int, int) int); ok {
		r1 = rf(ctx, page, perpage)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, int, int) error); ok {
		r2 = rf(ctx, page, perpage)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAll provides a mock function with given fields: ctx
func (_m *Usecase) GetAll(ctx context.Context) ([]buildings.Domain, error) {
	ret := _m.Called(ctx)

	var r0 []buildings.Domain
	if rf, ok := ret.Get(0).(func(context.Context) []buildings.Domain); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]buildings.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, buildingsId
func (_m *Usecase) GetByID(ctx context.Context, buildingsId int) (buildings.Domain, error) {
	ret := _m.Called(ctx, buildingsId)

	var r0 buildings.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int) buildings.Domain); ok {
		r0 = rf(ctx, buildingsId)
	} else {
		r0 = ret.Get(0).(buildings.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, buildingsId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByTitle provides a mock function with given fields: ctx, buildingsTitle
func (_m *Usecase) GetByTitle(ctx context.Context, buildingsTitle string) (buildings.Domain, error) {
	ret := _m.Called(ctx, buildingsTitle)

	var r0 buildings.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string) buildings.Domain); ok {
		r0 = rf(ctx, buildingsTitle)
	} else {
		r0 = ret.Get(0).(buildings.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, buildingsTitle)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, ip, buildingsDomain
func (_m *Usecase) Store(ctx context.Context, ip string, buildingsDomain *buildings.Domain) (buildings.Domain, error) {
	ret := _m.Called(ctx, ip, buildingsDomain)

	var r0 buildings.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string, *buildings.Domain) buildings.Domain); ok {
		r0 = rf(ctx, ip, buildingsDomain)
	} else {
		r0 = ret.Get(0).(buildings.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *buildings.Domain) error); ok {
		r1 = rf(ctx, ip, buildingsDomain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
